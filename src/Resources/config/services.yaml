services:
    # default configuration for services in *this* file
    _defaults:
        # automatically injects dependencies in your services
        autowire: true
        # automatically registers your services as commands, event subscribers, etc.
        autoconfigure: true
        # this means you cannot fetch services directly from the container via $container->get()
        # if you need to do this, you can override this setting on individual services
        public: false

    Networking\ElasticSearchBundle\Controller\DefaultController:
      autowire: true
      public: true
      arguments:
          $index: '@Networking\ElasticSearchBundle\Elastica\MultiIndex'
          $baseTemplate: '%networking_elastic_search.base_template%'
          $searchTemplate: '%networking_elastic_search.search_template%'
      tags:
          - { name: 'controller.service_arguments'}

    Networking\ElasticSearchBundle\Repository\SearchRepository:
        public: true

    Networking\ElasticSearchBundle\Transformer\PageSnapshotToElasticaTransformer:
        autowire: true


    Networking\ElasticSearchBundle\Transformer\MediaToElasticaTransformer:
        autowire: true
        arguments:
            $router: '@router.default'
            $path: '%env(DOCUMENT_ROOT)%'

    Networking\ElasticSearchBundle\Transformer\ElasticaToModelTransformerCollection:
        arguments:
            $transformers: !tagged_iterator { tag: 'fos_elastica.elastica_to_model_transformer', index_by: 'index' }

    Networking\ElasticSearchBundle\Elastica\MultiIndex:
        arguments:
            $name: '%env(ELASTICSEARCH_INDEX)%'
        calls:
            - [ addIndices, [ !tagged_iterator { tag: 'fos_elastica.index', index_by: 'index' } ] ]

    Elastica\SearchableInterface: '@Networking\ElasticSearchBundle\Elastica\MultiIndex'

    FOS\ElasticaBundle\Transformer\ElasticaToModelTransformerInterface: '@Networking\ElasticSearchBundle\Transformer\ElasticaToModelTransformerCollection'

    Networking\ElasticSearchBundle\Finder\TransformedFinder:
        arguments:
            $searchable: '@Networking\ElasticSearchBundle\Elastica\MultiIndex'
            $transformer: '@Networking\ElasticSearchBundle\Transformer\ElasticaToModelTransformerCollection'

    FOS\ElasticaBundle\Finder\PaginatedFinderInterface: '@Networking\ElasticSearchBundle\Finder\TransformedFinder'
    FOS\ElasticaBundle\Finder\FinderInterface: '@FOS\ElasticaBundle\Finder\TransformedFinder'

    Sonata\MediaBundle\Provider\Pool:
        alias: 'sonata.media.pool'

